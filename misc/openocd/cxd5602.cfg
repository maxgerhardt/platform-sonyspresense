#
# Sony CXD5602
#

source [find target/swj-dp.tcl]

adapter_khz 1000
adapter_nsrst_delay 1000
reset_config srst_only combined

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME cxd5602
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x5ba02477
}

# Initialize adapter

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

# Create each CPU targets

target create $_CHIPNAME.cpu3 cortex_m -dap $_CHIPNAME.dap -ap-num 3

# Apply RTOS configuration for NuttX core

$_CHIPNAME.cpu3 configure -rtos auto

cortex_m reset_config sysresetreq

#
# CPU clock control function
#
# mask: CPU mask to be enabled
#

set _SUBCORES 0

proc enable_clock {} {
    global _SUBCORES
    if {$_SUBCORES == 0} {
        return
    }

    set bits [expr $_SUBCORES << 16]
    mem2array rst 32 0x02011030 1            ;# Get reset register
    mww 0x02011030 [expr ($rst(0) & ~$bits)] ;# Assert reset
    mem2array clk 32 0x02011040 1            ;# Get clock register
    mww 0x02011040 [expr ($clk(0) | $bits)]  ;# Temporary enable clock
    sleep 1                                  ;# Wait for reset affected
    mww 0x02011040 $clk(0)                   ;# Restore clock
    mww 0x02011030 [expr ($rst(0) | $bits)]  ;# Deassert
    mww 0x02011040 [expr ($clk(0) | $bits)]  ;# Enable all sub cores
}

proc add_subcore {num} {
    global _SUBCORES
    set _SUBCORES [expr {$_SUBCORES | (1 << ($num - 3))}]
}

$_CHIPNAME.cpu3 configure -event examine-end {
    enable_clock
}

$_CHIPNAME.cpu3 configure -event reset-end {
    enable_clock
}
